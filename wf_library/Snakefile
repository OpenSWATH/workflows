# Obtain run_ids from DDA or DIA-ps mzXML files in data folder
run_ids, = glob_wildcards("../data_dda/{run}.mzXML")

rule all:
    input:
        runlib = expand("../results/library/rtn-{run}.splib", run=run_ids),
        library = "../data_library/library.pqp"

rule decoydb:
    input:
        "../data_library/library.fasta"
    output:
        "../results/library/library.fasta"
    shell:
        "DecoyDatabase -in {input} -out {output}"

rule spectra:
    input:
        "../data_dda/{run}.mzXML"
    output:
        "../results/library/{run}.mzXML"
    shell:
        "ln {input} {output}"

rule msfragger:
    input:
        fasta = rules.decoydb.output,
        mzxml = rules.spectra.output
    output:
        "../results/library/{run}.pepXML"
    threads: 4
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 8192
    shell:
        "java -Xmx8G -jar MSFragger-20171106.jar fragger.params {input.mzxml}"

rule peptideprophet:
    input:
        fasta = rules.decoydb.output,
        pepxml = rules.msfragger.output
    output:
        "../results/library/interact-{run}.pepXML"
    shell:
        "InteractParser {output} {input.pepxml} -D{input.fasta} && PeptideProphetParser {output} ACCMASS NONPARAM PPM DECOY=DECOY_"

rule iprophet:
    input:
        "../results/library/interact-{run}.pepXML"
    output:
        "../results/library/iprophet-{run}.pepXML"
    threads: 1
    shell:
        "InterProphetParser DECOY=DECOY_ THREADS={threads} {input} {output}"

rule spectra_convert:
    input:
        "../results/library/{run}.mzXML"
    output:
        "../results/library/{run}.mzML"
    shell:
        "outdir=$(dirname {output}) && "
        "msconvert {input} --32 -o $outdir"

rule easypqp:
    input:
        pepxml = expand("../results/library/iprophet-{run}.pepXML", run=run_ids),
        mzml = expand("../results/library/{run}.mzML", run=run_ids),
    output:
        temp(touch("calibrated.iRT"))
    params:
        library_modifications = "library_modifications.params",
        fdr_threshold = 0.01
    threads: 1
    script:
        "scripts/easypqp.py"

rule spectrast_import:
    input:
        pepxml = rules.iprophet.output,
        irt = rules.hrirt.output
    params:
        irt = "../results/library/iprophet-{run}.iRT"
    output:
        name = temp(touch("../results/library/rtn-{run}")),
        splib = "../results/library/rtn-{run}.splib"
    shell:
        "spectrast -cN{output.name} -c_IRT{params.irt} -c_IRR! -cq0.01 -c_RDYDECOY {input.pepxml}"

rule spectrast_consensus:
    input:
        expand("../results/library/rtn-{run}.splib", run=run_ids)
    output:
        "../results/library/consensus.splib"
    shell:
        "spectrast -cN../results/library/consensus -cAC -cJU {input}"

rule spectrast_filter:
    input:
        fasta = rules.decoydb.input,
        splib = rules.spectrast_consensus.output
    output:
        "../results/library/proteotypic.mrm"
    shell:
        "spectrast -cQ20 -cN../results/library/proteotypic -cM -cu -cd -cD{input.fasta} {input.splib}"

rule generate_swath_assays:
    input:
        rules.spectrast_filter.output
    output:
        temp("../results/library/assays.TraML")
    shell:
        "OpenSwathAssayGenerator -in {input} -out {output}"

rule generate_swath_decoys:
    input:
        rules.generate_swath_assays.output
    output:
        temp("../results/library/assays_decoys.TraML")
    shell:
        "OpenSwathDecoyGenerator -in {input} -out {output}"

rule generate_pqp:
    input:
        rules.generate_swath_decoys.output
    output:
        "../data_library/library.pqp"
    shell:
        "TargetedFileConverter -in {input} -out {output}"
