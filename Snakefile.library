# Obtain run_ids from DDA or DIA-ps mzXML files in data folder
run_ids, = glob_wildcards("data_dda/{run}.mzXML")

rule all:
    input:
        global_target_pqp =  expand("results/library/{run}_global_pqp.tsv", run=run_ids),
        pqp = "data_library/library.pqp"

rule decoydb:
    input:
        "data_library/library.fasta"
    output:
        "results/library/library.fasta"
    singularity:
        "develop.simg"
    shell:
        "DecoyDatabase -in {input} -out {output}"

rule digestdb:
    input:
        rules.decoydb.output
    output:
        "results/library/peptides.pkl"
    params:
        peptides = "results/library/peptides.fasta"
    singularity:
        "develop.simg"
    shell:
        "Digestor -in {input} -out {params.peptides} -missed_cleavages 1 -min_length 7 -max_length 50 -enzyme Trypsin && "
        "python3 scripts/fasta2index.py {params.peptides} {output}"

rule spectra_link:
    input:
        "data_dda/{run}.mzXML"
    output:
        "results/library/{run}.mzXML"
    singularity:
        "develop.simg"
    shell:
        "ln {input} {output}"

rule msfragger_index:
    input:
        fasta = rules.decoydb.output,
        mzxml = "params/msfragger.mzXML"
    output:
        index = "results/library/library.fasta.1.pepindex",
        tmp = temp("params/msfragger.tsv")
    singularity:
        "develop.simg"
    threads: 4
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 8192
    shell:
        "java -Xmx{resources.mem_mb}M -jar MSFragger-20180316.jar params/fragger.params {input.mzxml}"

rule msfragger_search:
    input:
        fasta = rules.decoydb.output,
        index = rules.msfragger_index.output.index,
        mzxml = rules.spectra_link.output
    output:
        "results/library/{run}.tsv"
    singularity:
        "develop.simg"
    threads: 4
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 8192
    shell:
        "java -Xmx{resources.mem_mb}M -jar MSFragger-20180316.jar params/fragger.params {input.mzxml}"

rule msfragger_convert:
    input:
        fasta = rules.digestdb.output,
        psms = rules.msfragger_search.output
    output:
        "results/library/{run}_pyprophet.tsv"
    singularity:
        "develop.simg"
    shell:
        "python3 scripts/fragger2pyprophet.py {input.psms} {input.fasta} {output}"

rule pyprophet_learn:
    input:
        expand("results/library/{run}_pyprophet.tsv", run=run_ids),
    output:
        "results/library/pyprophet_learn_weights.csv"
    params:
        merged = "results/library/pyprophet_learn.tsv"
    singularity:
        "develop.simg"
    threads: 4
    shell:
        "python3 scripts/pyprophet2subsample.py {params.merged} {input} && "
        "pyprophet score --in {params.merged} --threads={threads} --ss_initial_fdr=0.02 --ss_iteration_fdr=0.01"

rule pyprophet_score:
    input:
        pyprophet =rules.msfragger_convert.output,
        model = rules.pyprophet_learn.output
    output:
        "results/library/{run}_pyprophet_scored.tsv"
    singularity:
        "develop.simg"
    shell:
        "pyprophet score --in {input.pyprophet} --apply_weights={input.model}"

rule easypqp:
    input:
        psms = expand("results/library/{run}_pyprophet_scored.tsv", run=run_ids),
        mzxml = expand("results/library/{run}.mzXML", run=run_ids),
    output:
        peptide_plot = "results/library/pyprophet_peptides.pdf",
        protein_plot = "results/library/pyprophet_protein.pdf",
    singularity:
        "develop.simg"
    params:
        psm_fdr_threshold = 0.01,
        peptide_fdr_threshold = 0.01,
        protein_fdr_threshold = 0.01
    shell:
        "python3 scripts/easypqp.py {params.psm_fdr_threshold} {params.peptide_fdr_threshold} {params.protein_fdr_threshold} {output.peptide_plot} {output.protein_plot} {input.psms} {input.mzxml}"

rule global_target_pqp:
    input:
        iRT = rules.easypqp.output
    params:
        peaks = temp("results/library/{run}_global_peaks.tsv")
    output:
        temp("results/library/{run}_global_pqp.tsv")
    singularity:
        "develop.simg"
    shell:
        "OpenSwathAssayGenerator -in {params.peaks} -out {output}"

rule global_combined_pqp:
    input:
        expand("results/library/{run}_global_pqp.tsv", run=run_ids)
    output:
        temp("results/library/combined_global_pqp.tsv")
    shell:
        "awk 'BEGIN {{ FS=\"\t\"; OFS=\"\t\" }} FNR>1 || NR==1 {{print $1,$2,$3,$4,$5,$6,$7,$8,$14,$16,$17,$18,$23,$24,$25,$26,$27}}' {input} > {output}"

rule global_combined_decoy_pqp:
    input:
        rules.global_combined_pqp.output
    output:
        "data_library/library.pqp"
    singularity:
        "develop.simg"
    shell:
        "OpenSwathDecoyGenerator -in {input} -out {output}"
